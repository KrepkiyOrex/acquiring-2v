name: bank

services:
  kafka:
    image: confluentinc/cp-kafka:7.7.0
    container_name: kafka_cont
    ports:
      - "9093:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092 # for compose
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_LOGLEVEL: "ERROR"
    networks:
      - acquiring_app
    depends_on:
      - zookeeper

  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.0
    container_name: zookeeper_cont
    ports:
      - "2181:2181"
    networks:
      - acquiring_app
    environment:
      ZOOKEEPER_LOG_LEVEL: WARN  # Уменьшает уровень логирования до WARN
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # kafdrop:
  #   image: obsidiandynamics/kafdrop
  #   container_name: kafdrop_cont
  #   ports:
  #     - "9000:9000"
  #   environment:
  #     - KAFKA_BROKERCONNECT=kafka:9093
  #   networks:
  #     - acquiring_app

  db:
    image: postgres:latest
    container_name: postgres_cont
    environment:
      TZ: Europe/Samara
    env_file: 
      - .env
    networks:
      - acquiring_app
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

# for prod (work)
  # app:
  #   build:
  #     context: acquiring
  #   container_name: acquiring_cont
  #   environment:
  #     TZ: Europe/Samara
  #     KAFKA_BROKER: kafka:9092
  #   env_file:
  #     - .env
  #   networks:
  #     - acquiring_app
  #   depends_on:
  #     - db
  #     # - kafka
  #   ports:
  #     - "8080:8081"
  #   volumes:
  #     # DO NOT DELETE!
  #     # for production (work)
  #     - ./acquiring/internal/source:/app/internal/source # монтируем директорию с шаблонами
  #     # - ./acquiring:/app # for test

# for dev (CompileDaemon)
  app:
    # build: acquiring
    build:
      context: acquiring
      dockerfile: Dockerfile.app
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
    # healthcheck:
      # test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      # interval: 1s
      # timeout: 5s
      # retries: 10
    container_name: acquiring_cont
    environment:
      TZ: Europe/Samara
      KAFKA_BROKER: kafka:9092
    env_file:
      - .env
    networks:
      - acquiring_app
    depends_on:
      - db
    ports:
      - "8080:8081"
    volumes:
      - ./acquiring:/app # for dev (CompileDaemon)
      # - ./acquiring/internal/source:/app/internal/source # for prod

  app-tests:
    build:
      context: acquiring
      dockerfile: Dockerfile.tests
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1g
    container_name: acquiring_tests
    environment:
      TZ: Europe/Samara
      KAFKA_BROKER: kafka:9092
    env_file:
      - .env
    networks:
      - acquiring_app
    depends_on:
      - db
    ports:
      - "8082:8081"
    volumes:
      - ./acquiring:/app # for dev (nodemon)

# depr
  # consumer-app:
  #   build:
  #     context: consumer-app
  #   container_name: consumer_cont
  #   networks:
  #     - acquiring_app
  #   env_file:
  #     - .env
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   volumes:
  #     - ./consumer-app:/app

  adminer:
    image: adminer
    container_name: adminer_cont
    ports:
      - "8081:8080"
    networks:
      - acquiring_app
    volumes:
    - ./acquiring/internal/database/postgres/adminer/adminer.css:/var/www/html/adminer.css

  nginx:
    build:
      # context: ./
      dockerfile: DockerfileNginx
    container_name: nginx_cont
    environment:
      TZ: Europe/Samara
    # depends_on:
      # - app
    ports:
      - "80:80"
      - "443:443"
    # expose:
    #   - "8081"
    networks:
      - acquiring_app
    volumes:
      # - nginx_ssl:/etc/nginx/ssl
      # - nginx_source:/usr/share/nginx/html/source
      - ./acquiring/ssl:/etc/nginx/ssl
      # - ./acquiring/internal/source:/usr/share/nginx/html/source

networks:
  acquiring_app:
    external: true # что бы не создавал данную сеть при запуске

volumes:
  db_data: